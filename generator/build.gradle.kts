/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    `maven-publish`
    id("io.quarkus")
    id("com.palantir.docker") version "0.30.0"
    id("com.palantir.docker-compose") version "0.30.0"
}

repositories {
    mavenLocal()


    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

val quarkusVersion: String by project
val lombokVersion = "1.18.20"

dependencies {
    implementation(enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}"))
    implementation("io.quarkus:quarkus-resteasy-jackson")
    implementation("io.quarkus:quarkus-arc")
    implementation("io.quarkus:quarkus-resteasy")
    implementation("io.quarkus","quarkus-elasticsearch-rest-high-level-client")
    implementation("io.quarkus:quarkus-logging-gelf")
    implementation("org.projectlombok","lombok", lombokVersion)


    testImplementation("io.quarkus:quarkus-junit5")
    testImplementation("io.rest-assured:rest-assured:4.4.0")
}

group = "com.example"
version = "1.0-SNAPSHOT"
description = "generator"
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

val dockerPrepareAfter by tasks.registering{
    description = "Copies resources needed after dockerPrepare"
    group = "docker"

    mustRunAfter("dockerPrepare")

    doLast{
        //there is a need for only one copy, but this like this for learning that
        //it is possible to have nultiple copy instructions
        copy {
            from ("build/quarkus-app/lib/")
            into ("build/docker/quarkus-app/lib")
        }
        copy {
            from ("build/quarkus-app/*.jar")
            into ("build/docker/quarkus-app/deployments")
        }
        copy {
            from ("build/quarkus-app/app/")
            into ("build/docker/quarkus-app/app/")
        }
        copy {
            from ("build/quarkus-app/quarkus/")
            into ("build/docker/quarkus-app/quarkus/")
        }
    }
}


    


docker {
    dependsOn(project.tasks.getByName("dockerPrepareAfter"))

    tag("local", "${project.name}:latest")
    tag("localVersion", "${project.name}:${project.version}")
    name = project.name

    setDockerfile(file("src/main/docker/Dockerfile.jvm"))
}

dockerCompose {
    setDockerComposeFile(file("src/main/docker/docker-compose.yml"))
}
